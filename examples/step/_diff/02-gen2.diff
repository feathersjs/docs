diff -bdur --new-file 02/gen1/config/default.json 02/gen2/config/default.json
--- 02/gen1/config/default.json	2017-04-09 09:00:41.590007000 -0400
+++ 02/gen2/config/default.json	2017-04-09 09:12:41.778007000 -0400
@@ -5,5 +5,31 @@
   "paginate": {
     "default": 10,
     "max": 50
+  },
+  "authentication": {
+    "secret": "da81c03cc0b6f35e66dea739da376de3ef0c3e5783b3d42f065e216c28efd0872a5f328109e19973100d785814f71a56aa8f250aa85247a430f82419738a556e576c1f4a1031a726c3ef79c68c0ef7750a7d8bb8e6e463a2c80092d50c1561a8208a7fc214d78789848e524eef189363b1ff2dc2b732c72a762ff71e27e7eab09fa77b63fd7418b36576d0a9a74a4396f696ccd2e54cb2f38d2348c963f3f230f72911efdeed879b93ec366199c64e44e826208d9cfe891242fc0ad1ee5cff6799849f7a70cbcc838c697145f21d5f747b820a15da4fb6173d5aa6a91efc456dc24ed1c942b60367293ebcb29852bdbc3ebace724d48ae79dcaac1dd4ed74a62",
+    "strategies": [
+      "jwt",
+      "local"
+    ],
+    "path": "/authentication",
+    "service": "users",
+    "jwt": {
+      "header": {
+        "type": "access"
+      },
+      "audience": "https://yourdomain.com",
+      "subject": "anonymous",
+      "issuer": "feathers",
+      "algorithm": "HS256",
+      "expiresIn": "1d"
+    },
+    "local": {
+      "entity": "user",
+      "service": "users",
+      "usernameField": "email",
+      "passwordField": "password"
   }
+  },
+  "nedb": "../data"
 }
diff -bdur --new-file 02/gen1/package.json 02/gen2/package.json
--- 02/gen1/package.json	2017-04-09 09:01:50.466007000 -0400
+++ 02/gen2/package.json	2017-04-09 09:13:11.086007000 -0400
@@ -31,13 +31,19 @@
     "compression": "1.6.2",
     "cors": "2.8.3",
     "feathers": "2.1.1",
+    "feathers-authentication": "1.2.1",
+    "feathers-authentication-hooks": "0.1.0",
+    "feathers-authentication-jwt": "0.3.1",
+    "feathers-authentication-local": "0.3.4",
     "feathers-configuration": "0.4.1",
     "feathers-errors": "2.6.3",
     "feathers-hooks": "1.8.1",
     "feathers-hooks-common": "3.0.0",
+    "feathers-nedb": "2.6.2",
     "feathers-rest": "1.7.1",
     "feathers-socketio": "1.5.2",
     "helmet": "3.5.0",
+    "nedb": "1.8.0",
     "serve-favicon": "2.4.2",
     "winston": "2.3.1"
   },
diff -bdur --new-file 02/gen1/src/app.js 02/gen2/src/app.js
--- 02/gen1/src/app.js	2017-04-09 09:00:41.670007000 -0400
+++ 02/gen2/src/app.js	2017-04-09 09:12:41.790007000 -0400
@@ -17,6 +17,8 @@
 const services = require('./services');
 const appHooks = require('./app.hooks');

+const authentication = require('./authentication');
+
 const app = feathers();

 // Load app configuration
@@ -36,6 +38,8 @@
 app.configure(rest());
 app.configure(socketio());

+app.configure(authentication);
+
 // Set up our services (see `services/index.js`)
 app.configure(services);
 // Configure middleware (see `middleware/index.js`) - always has to be last
diff -bdur --new-file 02/gen1/src/authentication.js 02/gen2/src/authentication.js
--- 02/gen1/src/authentication.js	1969-12-31 19:00:00.000000000 -0500
+++ 02/gen2/src/authentication.js	2017-04-09 09:12:41.786007000 -0400
@@ -0,0 +1,30 @@
+'use strict';
+
+const authentication = require('feathers-authentication');
+const jwt = require('feathers-authentication-jwt');
+const local = require('feathers-authentication-local');
+
+
+module.exports = function () {
+  const app = this;
+  const config = app.get('authentication');
+
+  // Set up authentication with the secret
+  app.configure(authentication(config));
+  app.configure(jwt());
+  app.configure(local(config.local));
+
+  // The `authentication` service is used to create a JWT.
+  // The before `create` hook registers strategies that can be used
+  // to create a new valid JWT (e.g. local or oauth2)
+  app.service('authentication').hooks({
+    before: {
+      create: [
+        authentication.hooks.authenticate(config.strategies)
+      ],
+      remove: [
+        authentication.hooks.authenticate('jwt')
+      ]
+    }
+  });
+};
diff -bdur --new-file 02/gen1/src/models/users.model.js 02/gen2/src/models/users.model.js
--- 02/gen1/src/models/users.model.js	1969-12-31 19:00:00.000000000 -0500
+++ 02/gen2/src/models/users.model.js	2017-04-09 09:12:41.798007000 -0400
@@ -0,0 +1,14 @@
+const NeDB = require('nedb');
+const path = require('path');
+
+module.exports = function (app) {
+  const dbPath = app.get('nedb');
+  const Model = new NeDB({
+    filename: path.join(dbPath, 'users.db'),
+    autoload: true
+  });
+
+  Model.ensureIndex({ fieldName: 'email', unique: true });
+
+  return Model;
+};
diff -bdur --new-file 02/gen1/src/services/index.js 02/gen2/src/services/index.js
--- 02/gen1/src/services/index.js	2017-04-09 09:00:41.662007000 -0400
+++ 02/gen2/src/services/index.js	2017-04-09 09:12:41.798007000 -0400
@@ -1,5 +1,8 @@
 'use strict';

+const users = require('./users/users.service.js');
+
 module.exports = function () {
   const app = this; // eslint-disable-line no-unused-vars
+  app.configure(users);
 };
diff -bdur --new-file 02/gen1/src/services/users/users.filters.js 02/gen2/src/services/users/users.filters.js
--- 02/gen1/src/services/users/users.filters.js	1969-12-31 19:00:00.000000000 -0500
+++ 02/gen2/src/services/users/users.filters.js	2017-04-09 09:12:41.806007000 -0400
@@ -0,0 +1,6 @@
+/* eslint no-console: 1 */
+console.warn('You are using the default filter for the users service. For more information about event filters see https://docs.feathersjs.com/api/events.html#event-filtering'); // eslint-disable-line no-console
+
+module.exports = function (data, connection, context) { // eslint-disable-line no-unused-vars
+  return data;
+};
diff -bdur --new-file 02/gen1/src/services/users/users.hooks.js 02/gen2/src/services/users/users.hooks.js
--- 02/gen1/src/services/users/users.hooks.js	1969-12-31 19:00:00.000000000 -0500
+++ 02/gen2/src/services/users/users.hooks.js	2017-04-09 09:12:41.806007000 -0400
@@ -0,0 +1,51 @@
+'use strict';
+
+const { authenticate } = require('feathers-authentication').hooks;
+const commonHooks = require('feathers-hooks-common');
+const { restrictToOwner } = require('feathers-authentication-hooks');
+
+const { hashPassword } = require('feathers-authentication-local').hooks;
+const restrict = [
+  authenticate('jwt'),
+  restrictToOwner({
+    idField: '_id',
+    ownerField: '_id'
+  })
+];
+
+module.exports = {
+  before: {
+    all: [],
+    find: [ authenticate('jwt') ],
+    get: [ ...restrict ],
+    create: [ hashPassword() ],
+    update: [ ...restrict, hashPassword() ],
+    patch: [ ...restrict, hashPassword() ],
+    remove: [ ...restrict ]
+  },
+
+  after: {
+    all: [
+      commonHooks.when(
+        context => context.params.provider,
+        commonHooks.discard('password')
+      )
+    ],
+    find: [],
+    get: [],
+    create: [],
+    update: [],
+    patch: [],
+    remove: []
+  },
+
+  error: {
+    all: [],
+    find: [],
+    get: [],
+    create: [],
+    update: [],
+    patch: [],
+    remove: []
+  }
+};
diff -bdur --new-file 02/gen1/src/services/users/users.service.js 02/gen2/src/services/users/users.service.js
--- 02/gen1/src/services/users/users.service.js	1969-12-31 19:00:00.000000000 -0500
+++ 02/gen2/src/services/users/users.service.js	2017-04-09 09:12:41.798007000 -0400
@@ -0,0 +1,31 @@
+'use strict';
+
+// Initializes the `users` service on path `/users`
+const createService = require('feathers-nedb');
+const createModel = require('../../models/users.model');
+const hooks = require('./users.hooks');
+const filters = require('./users.filters');
+
+module.exports = function () {
+  const app = this;
+  const Model = createModel(app);
+  const paginate = app.get('paginate');
+
+  const options = {
+    name: 'users',
+    Model,
+    paginate
+  };
+
+  // Initialize our service with any options it requires
+  app.use('/users', createService(options));
+
+  // Get our initialized service so that we can register hooks and filters
+  const service = app.service('users');
+
+  service.hooks(hooks);
+
+  if (service.filter) {
+    service.filter(filters);
+  }
+};
diff -bdur --new-file 02/gen1/test/services/users.test.js 02/gen2/test/services/users.test.js
--- 02/gen1/test/services/users.test.js	1969-12-31 19:00:00.000000000 -0500
+++ 02/gen2/test/services/users.test.js	2017-04-09 09:12:41.814007000 -0400
@@ -0,0 +1,12 @@
+'use strict';
+
+const assert = require('assert');
+const app = require('../../src/app');
+
+describe('\'users\' service', () => {
+  it('registered the service', () => {
+    const service = app.service('users');
+
+    assert.ok(service, 'Registered the service');
+  });
+});
