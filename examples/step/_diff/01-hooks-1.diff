--- 01/websocket/1.js	2017-01-13 13:31:34.853000000 -0500
+++ 01/hooks/1.js	2017-01-13 14:03:07.126000000 -0500
@@ -1,5 +1,5 @@
 
-// Example - Create REST & socketio API, and serve static files
+// Example - Use hooks with service
 
 const expressServerConfig = require('../common/expressServerConfig');
 const expressMiddleware = require('../common/expressMiddleware');
@@ -9,7 +9,13 @@
 const path = require('path');
 const service = require('feathers-nedb');
 
+const Ajv = require('ajv');
+const authHooks = require('feathers-authentication-local').hooks;
+const hooks = require('feathers-hooks');
+const commonHooks = require('feathers-hooks-common');
+
 const app = expressServerConfig()
+  .configure(hooks())
   .configure(rest())
   .configure(socketio())
   .configure(services)
@@ -19,7 +25,29 @@
 server.on('listening', () => console.log(`Feathers application started on port 3030`));
 
 function services() {
-  this.use('/users', service({ Model: userModel() }));
+  this.configure(user);
+}
+
+function user() {
+  const app = this;
+  
+  app.use('/users', service({ Model: userModel() }));
+  const userService = app.service('users');
+  
+  const {
+    setCreatedAt, setUpdatedAt, unless, remove /* , validateSchema */
+  } = commonHooks;
+  
+  userService.before({
+    create: [
+      validateSchema(userSchema(), Ajv),
+      authHooks.hashPassword(),
+      setCreatedAt(),
+      setUpdatedAt()
+    ]});
+  userService.after({
+    all: unless(hook => hook.method === 'find', remove('password')),
+  });
 }
 
 function userModel() {
@@ -28,3 +56,21 @@
     autoload: true
   });
 }
+
+function userSchema() {
+  return {
+    title: 'User Schema',
+    $schema: 'http://json-schema.org/draft-04/schema#',
+    type: 'object',
+    required: [ 'email', 'password' ],
+    additionalProperties: false,
+    properties: {
+      email: { type: 'string', maxLength: 100, minLength: 6 },
+      password: { type: 'string', maxLength: 30, minLength: 8 }
+    }
+  };
+}
+
+function validateSchema() { // todo replace
+  return hook => hook;
+}
